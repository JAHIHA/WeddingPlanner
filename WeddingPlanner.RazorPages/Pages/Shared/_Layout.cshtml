@using WeddingPlanner.RazorPages.Pages.Auth
@inject SessionManager _sessionManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WeddingPlanner.RazorPages</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/WeddingPlanner.RazorPages.styles.css" asp-append-version="true" />
    @Html.AntiForgeryToken()
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-page="/Index">WeddingPlanner.RazorPages</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                        </li>
                        @if(_sessionManager.IsAuthenticated==false)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-page="/UserLogin/UserLogin">Login</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-page="/Users/Create">Register</a>
                            </li>
                        }
                        @if (_sessionManager.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-page="/Flowers/Index">Flowers</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-page="/Food/Index">Food</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-page="/Location/Index">Location</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-page="/Game">Design</a>
                            </li>

                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-page="/Logout">Logout</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>
    <!-- chatbox -->
    <button id="chat-toggle-btn" onclick="toggleChatbox()">Chat</button>

    <!-- Chatbox Container: Added -->
    <div id="chatbox-container" style="display: none;">
        <div id="chat-header">
            <span>Chatbot</span>
            <button onclick="closeChatbox()">X</button>
        </div>
        <div id="chatbox-content"></div>
        <form id="chat-form" onsubmit="sendMessage(event)">
            <input type="text" id="chat-input" placeholder="Type your message" required />
            <button type="submit">Send</button>
        </form>
    </div>
    <!--End of chatbox-->

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - WeddingPlanner.RazorPages - <a asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
<!--style for chatbox-->
<style>
    #chat-toggle-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 10px 20px;
        background-color: #0078D4;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    #chatbox-container {
        position: fixed;
        bottom: 70px;
        right: 20px;
        width: 300px;
        height: 400px;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        background-color: white;
        display: flex;
        flex-direction: column;
    }

    #chat-header {
        background-color: #0078D4;
        color: white;
        padding: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    #chatbox-content {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }

    #chat-form {
        display: flex;
        padding: 10px;
    }

    #chat-input {
        flex: 1;
        padding: 5px;
        margin-right: 5px;
    }

    #chat-form button {
        padding: 5px 10px;

    }

    .user-message {
        color: blue;
        margin: 5px 0;
        padding: 5px;
        background-color: #e8f4ff;
        border-radius: 5px;
        align-self: flex-end;
    }

    /* Bot messages */
    .bot-message {
        color: green;
        margin: 5px 0;
        padding: 5px;
        background-color: #f1f1f1;
        border-radius: 5px;
        align-self: flex-start;
    }

    /* Error messages */
    .error-message {
        color: red;
        margin: 5px 0;
        padding: 5px;
        background-color: #ffe6e6;
        border-radius: 5px;
        align-self: flex-start;
    }
</style>
<script>
    //chatbox js
    function toggleChatbox() {
            const chatbox = document.getElementById('chatbox-container');
            chatbox.style.display = chatbox.style.display === 'none' ? 'block' : 'none';
        }

        function closeChatbox() {
            document.getElementById('chatbox-container').style.display = 'none';
        }

             async function sendMessage(event) {
        event.preventDefault();
        const input = document.getElementById('chat-input');
        const message = input.value;

        if (message.trim()) {
            // Add the user's message to the chatbox
            addMessageToChat('User', message, 'user-message');
            input.value = '';

            try {
                const response = await fetch('http://localhost:5267/chatbox', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userMessage: message }),
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Bot response:', result);  // Log the response from the backend

                    if (result.botMessage) {
                        // Add the bot's response to the chatbox
                        addMessageToChat('Bot', result.botMessage, 'bot-message');
                    } else {
                        addMessageToChat('Bot', 'No response from the bot.', 'error-message');
                    }
                } else {
                    addMessageToChat('Bot', 'Oops! Something went wrong. Please try again.', 'error-message');
                    console.error("Error: " + response.statusText);
                }
            } catch (error) {
                addMessageToChat('Bot', 'Error connecting to the server. Please check your internet connection.', 'error-message');
                console.error("Error: " + error);
            }
        }
    }
    
    

        function addMessageToChat(role, text, className) {
        const chatContent = document.getElementById('chatbox-content');
        const messageElement = document.createElement('div');

        // Add a CSS class for styling based on the message type
        messageElement.className = className;

        // Add role and message text
        messageElement.textContent = `${role}: ${text}`;
        chatContent.appendChild(messageElement);

        // Auto-scroll to the latest message
        chatContent.scrollTop = chatContent.scrollHeight;
    }
        //end of chatbox js
    async function logout() {
          if (!confirm("Are you sure you want to log out?")) {
        return; // If the user cancels, do nothing
    }
        // Use Fetch API to send a POST request to an endpoint that clears the token
        const response = await fetch('/api/logout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        });

        if (response.ok) {
            // Reload or redirect to the login page after logout
            window.location.href = '/Index';
        } else {
            alert('Logout failed. Please try again.');
        }
    }
</script>